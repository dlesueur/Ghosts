predict(new_data = test_data, type="class")
submission <- boost_preds %>%
bind_cols(., test_data) %>%
select(id, .pred_class) %>%
rename(type = .pred_class)
vroom_write(x=submission, file="./Boost.csv", delim=",")
ghostRecipe <- recipe(type ~ ., data = train_data) %>%
step_mutate_at(c('color'), fn=factor) %>%
step_other(all_nominal_predictors(), threshold = .001) %>%
step_lencode_glm(all_nominal_predictors(), outcome = vars(type))
nb_model <- naive_Bayes(Laplace=tune(), smoothness=tune()) %>%
set_mode("classification") %>%
set_engine("naivebayes")
nb_wf <- workflow() %>%
add_recipe(ghostRecipe) %>%
add_model(nb_model)
tuning_grid <- grid_regular(Laplace(), smoothness(),levels = 5)
folds <- vfold_cv(train_data, v = 5, repeats=1)
CV_results <- nb_wf %>%
tune_grid(resamples=folds,
grid=tuning_grid,
metrics = metric_set(accuracy))
bestTune <- CV_results %>%
select_best(metric="accuracy")
final_nb_wf <- nb_wf %>%
finalize_workflow(bestTune) %>%
fit(data = train_data)
nb_predictions <- final_nb_wf %>%
predict(new_data = test_data, type = "class")
submission <- nb_predictions %>%
bind_cols(., test_data) %>%
select(id, .pred_class) %>%
rename(type = .pred_class)
vroom_write(x=submission, file="./NaiveBayes.csv", delim=",")
CV_results <- nb_wf %>%
tune_grid(resamples=folds,
grid=tuning_grid,
metrics = metric_set(accuracy, roc_auc))
bestTune <- CV_results %>%
select_best(metric="accuracy")
final_nb_wf <- nb_wf %>%
finalize_workflow(bestTune) %>%
fit(data = train_data)
nb_predictions <- final_nb_wf %>%
predict(new_data = test_data, type = "class")
submission <- nb_predictions %>%
bind_cols(., test_data) %>%
select(id, .pred_class) %>%
rename(type = .pred_class)
vroom_write(x=submission, file="./NaiveBayes.csv", delim=",")
library(tidyverse)
library(tidymodels)
library(vroom)
library(discrim)
library(encode)
test_data <- read_csv("test.csv")
train_data <- read_csv("train.csv")
ghostRecipe <- recipe(type ~ ., data = train_data) %>%
step_mutate_at(c('color'), fn=factor) %>%
step_other(all_nominal_predictors(), threshold = .001) %>%
step_lencode_glm(all_nominal_predictors(), outcome = vars(type))
nb_model <- naive_Bayes(Laplace=tune(), smoothness=tune()) %>%
set_mode("classification") %>%
set_engine("naivebayes")
nb_wf <- workflow() %>%
add_recipe(ghostRecipe) %>%
add_model(nb_model)
tuning_grid <- grid_regular(Laplace(), smoothness(),levels = 5)
folds <- vfold_cv(train_data, v = 5, repeats=1)
CV_results <- nb_wf %>%
tune_grid(resamples=folds,
grid=tuning_grid,
metrics = metric_set(accuracy))
bestTune <- CV_results %>%
select_best(metric="accuracy")
final_nb_wf <- nb_wf %>%
finalize_workflow(bestTune) %>%
fit(data = train_data)
nb_predictions <- final_nb_wf %>%
predict(new_data = test_data, type = "class")
submission <- nb_predictions %>%
bind_cols(., test_data) %>%
select(id, .pred_class) %>%
rename(type = .pred_class)
vroom_write(x=submission, file="./NaiveBayes.csv", delim=",")
library(tidyverse)
library(tidymodels)
library(vroom)
library(discrim)
library(encode)
test_data <- read_csv("test.csv")
train_data <- read_csv("train.csv")
ghostRecipe <- recipe(type ~ ., data = train_data) %>%
step_mutate_at(c('color'), fn=factor) %>%
step_other(all_nominal_predictors(), threshold = .001) %>%
step_lencode_glm(all_nominal_predictors(), outcome = vars(type))
nb_model <- naive_Bayes(Laplace=tune(), smoothness=tune()) %>%
set_mode("classification") %>%
set_engine("naivebayes")
nb_wf <- workflow() %>%
add_recipe(ghostRecipe) %>%
add_model(nb_model)
tuning_grid <- grid_regular(Laplace(), smoothness(),levels = 5)
folds <- vfold_cv(train_data, v = 5, repeats=1)
CV_results <- nb_wf %>%
tune_grid(resamples=folds,
grid=tuning_grid,
metrics = metric_set(accuracy))
bestTune <- CV_results %>%
select_best(metric="accuracy")
final_nb_wf <- nb_wf %>%
finalize_workflow(bestTune) %>%
fit(data = train_data)
nb_predictions <- final_nb_wf %>%
predict(new_data = test_data, type = "class")
submission <- nb_predictions %>%
bind_cols(., test_data) %>%
select(id, .pred_class) %>%
rename(type = .pred_class)
vroom_write(x=submission, file="./NaiveBayes.csv", delim=",")
library(tidyverse)
library(tidymodels)
library(vroom)
library(discrim)
library(encode)
test_data <- read_csv("test.csv")
train_data <- read_csv("train.csv")
ghostRecipe <- recipe(type ~ ., data = train_data) %>%
step_mutate_at(c('color'), fn=factor) %>%
step_other(all_nominal_predictors(), threshold = .001) %>%
step_lencode_glm(all_nominal_predictors(), outcome = vars(type))
nb_model <- naive_Bayes(Laplace=tune(), smoothness=tune()) %>%
set_mode("classification") %>%
set_engine("naivebayes")
nb_wf <- workflow() %>%
add_recipe(ghostRecipe) %>%
add_model(nb_model)
tuning_grid <- grid_regular(Laplace(), smoothness(),levels = 5)
folds <- vfold_cv(train_data, v = 5, repeats=1)
CV_results <- nb_wf %>%
tune_grid(resamples=folds,
grid=tuning_grid,
metrics = metric_set(accuracy))
bestTune <- CV_results %>%
select_best(metric="accuracy")
final_nb_wf <- nb_wf %>%
finalize_workflow(bestTune) %>%
fit(data = train_data)
nb_predictions <- final_nb_wf %>%
predict(new_data = test_data, type = "class")
submission <- nb_predictions %>%
bind_cols(., test_data) %>%
select(id, .pred_class) %>%
rename(type = .pred_class)
vroom_write(x=submission, file="./NaiveBayes.csv", delim=",")
library(tidyverse)
library(tidymodels)
library(vroom)
library(discrim)
library(encode)
test_data <- read_csv("test.csv")
train_data <- read_csv("train.csv")
ghostRecipe <- recipe(type ~ ., data = train_data) %>%
step_mutate_at(c('color'), fn=factor) %>%
step_other(all_nominal_predictors(), threshold = .001) %>%
step_lencode_glm(all_nominal_predictors(), outcome = vars(type))
nb_model <- naive_Bayes(Laplace=tune(), smoothness=tune()) %>%
set_mode("classification") %>%
set_engine("naivebayes")
nb_wf <- workflow() %>%
add_recipe(ghostRecipe) %>%
add_model(nb_model)
tuning_grid <- grid_regular(Laplace(), smoothness(),levels = 10)
folds <- vfold_cv(train_data, v = 10, repeats=1)
CV_results <- nb_wf %>%
tune_grid(resamples=folds,
grid=tuning_grid,
metrics = metric_set(accuracy))
bestTune <- CV_results %>%
select_best(metric="accuracy")
final_nb_wf <- nb_wf %>%
finalize_workflow(bestTune) %>%
fit(data = train_data)
nb_predictions <- final_nb_wf %>%
predict(new_data = test_data, type = "class")
submission <- nb_predictions %>%
bind_cols(., test_data) %>%
select(id, .pred_class) %>%
rename(type = .pred_class)
vroom_write(x=submission, file="./NaiveBayes.csv", delim=",")
library(tidyverse)
library(tidymodels)
library(vroom)
library(discrim)
library(encode)
library(tidyverse)
library(tidymodels)
library(vroom)
library(discrim)
library(encode)
install.packages("encode")
library(tidyverse)
library(tidymodels)
library(vroom)
library(discrim)
library(encode)
test_data <- read_csv("test.csv")
train_data <- read_csv("train.csv")
ghostRecipe <- recipe(type ~ ., data = train_data) %>%
step_mutate_at(c('color'), fn=factor) %>%
step_other(all_nominal_predictors(), threshold = .001) %>%
step_lencode_glm(all_nominal_predictors(), outcome = vars(type))
nb_model <- naive_Bayes(Laplace=tune(), smoothness=tune()) %>%
set_mode("classification") %>%
set_engine("naivebayes")
nb_wf <- workflow() %>%
add_recipe(ghostRecipe) %>%
add_model(nb_model)
tuning_grid <- grid_regular(Laplace(), smoothness(),levels = 10)
folds <- vfold_cv(train_data, v = 10, repeats=1)
CV_results <- nb_wf %>%
tune_grid(resamples=folds,
grid=tuning_grid,
metrics = metric_set(accuracy))
bestTune <- CV_results %>%
select_best(metric="accuracy")
final_nb_wf <- nb_wf %>%
finalize_workflow(bestTune) %>%
fit(data = train_data)
nb_predictions <- final_nb_wf %>%
predict(new_data = test_data, type = "class")
submission <- nb_predictions %>%
bind_cols(., test_data) %>%
select(id, .pred_class) %>%
rename(type = .pred_class)
vroom_write(x=submission, file="./NaiveBayes.csv", delim=",")
library(tidyverse)
library(tidymodels)
library(vroom)
library(discrim)
library(encode)
test_data <- read_csv("test.csv")
train_data <- read_csv("train.csv")
ghostRecipe <- recipe(type ~ ., data = train_data) %>%
step_mutate_at(c('color'), fn=factor) %>%
step_other(all_nominal_predictors(), threshold = .001) %>%
step_lencode_glm(all_nominal_predictors(), outcome = vars(type))
nb_model <- naive_Bayes(Laplace=tune(), smoothness=tune()) %>%
set_mode("classification") %>%
set_engine("naivebayes")
nb_wf <- workflow() %>%
add_recipe(ghostRecipe) %>%
add_model(nb_model)
tuning_grid <- grid_regular(Laplace(), smoothness(),levels = 5)
folds <- vfold_cv(train_data, v = 5, repeats=1)
CV_results <- nb_wf %>%
tune_grid(resamples=folds,
grid=tuning_grid,
metrics = metric_set(roc_auc))
bestTune <- CV_results %>%
select_best(metric="roc_auc")
final_nb_wf <- nb_wf %>%
finalize_workflow(bestTune) %>%
fit(data = train_data)
nb_predictions <- final_nb_wf %>%
predict(new_data = test_data, type = "class")
submission <- nb_predictions %>%
bind_cols(., test_data) %>%
select(id, .pred_class) %>%
rename(type = .pred_class)
vroom_write(x=submission, file="./NaiveBayes.csv", delim=",")
library(tidyverse)
library(tidymodels)
library(vroom)
library(discrim)
library(encode)
test_data <- read_csv("test.csv")
train_data <- read_csv("train.csv")
ghostRecipe <- recipe(type ~ ., data = train_data) %>%
step_mutate_at(c('color'), fn=factor) %>%
step_other(all_nominal_predictors(), threshold = .001) %>%
step_lencode_glm(all_nominal_predictors(), outcome = vars(type))
nb_model <- naive_Bayes(Laplace=tune(), smoothness=tune()) %>%
set_mode("classification") %>%
set_engine("naivebayes")
nb_wf <- workflow() %>%
add_recipe(ghostRecipe) %>%
add_model(nb_model)
tuning_grid <- grid_regular(Laplace(), smoothness(),levels = 5)
folds <- vfold_cv(train_data, v = 5, repeats=1)
CV_results <- nb_wf %>%
tune_grid(resamples=folds,
grid=tuning_grid,
metrics = metric_set(roc_auc))
bestTune <- CV_results %>%
select_best(metric="roc_auc")
final_nb_wf <- nb_wf %>%
finalize_workflow(bestTune) %>%
fit(data = train_data)
nb_predictions <- final_nb_wf %>%
predict(new_data = test_data, type = "class")
submission <- nb_predictions %>%
bind_cols(., test_data) %>%
select(id, .pred_class) %>%
rename(type = .pred_class)
vroom_write(x=submission, file="./NaiveBayes.csv", delim=",")
bestTune
ghostRecipe <- recipe(type ~ ., data = train_data) %>%
step_mutate_at(c('color'), fn=factor) %>%
step_other(all_nominal_predictors(), threshold = .001) %>%
step_lencode_glm(all_nominal_predictors(), outcome = vars(type))
nb_model <- naive_Bayes(Laplace=0, smoothness=1.5) %>%
set_mode("classification") %>%
set_engine("naivebayes")
nb_predictions <- final_nb_wf %>%
predict(new_data = test_data, type = "class")
library(tidyverse)
library(tidymodels)
library(vroom)
library(discrim)
library(encode)
test_data <- read_csv("test.csv")
train_data <- read_csv("train.csv")
ghostRecipe <- recipe(type ~ ., data = train_data) %>%
step_mutate_at(c('color'), fn=factor) %>%
step_other(all_nominal_predictors(), threshold = .001) %>%
step_lencode_glm(all_nominal_predictors(), outcome = vars(type))
nb_model <- naive_Bayes(Laplace=0, smoothness=1.5) %>%
set_mode("classification") %>%
set_engine("naivebayes")
nb_wf <- workflow() %>%
add_recipe(ghostRecipe) %>%
add_model(nb_model)
final_nb_wf <- nb_wf %>%
add_recipe(ghostRecipe) %>%
add_model(nb_model) %>%
#finalize_workflow(bestTune) %>%
fit(data = train_data)
final_nb_wf <- nb_wf %>%
#finalize_workflow(bestTune) %>%
fit(data = train_data)
nb_predictions <- final_nb_wf %>%
predict(new_data = test_data, type = "class")
submission <- nb_predictions %>%
bind_cols(., test_data) %>%
select(id, .pred_class) %>%
rename(type = .pred_class)
vroom_write(x=submission, file="./NaiveBayes.csv", delim=",")
nb_model <- naive_Bayes(Laplace=0.0001, smoothness=1.5) %>%
set_mode("classification") %>%
set_engine("naivebayes")
nb_wf <- workflow() %>%
add_recipe(ghostRecipe) %>%
add_model(nb_model)
final_nb_wf <- nb_wf %>%
#finalize_workflow(bestTune) %>%
fit(data = train_data)
nb_predictions <- final_nb_wf %>%
predict(new_data = test_data, type = "class")
submission <- nb_predictions %>%
bind_cols(., test_data) %>%
select(id, .pred_class) %>%
rename(type = .pred_class)
vroom_write(x=submission, file="./NaiveBayes.csv", delim=",")
nb_model <- naive_Bayes(Laplace=0.1, smoothness=1.5) %>%
set_mode("classification") %>%
set_engine("naivebayes")
nb_wf <- workflow() %>%
add_recipe(ghostRecipe) %>%
add_model(nb_model)
final_nb_wf <- nb_wf %>%
#finalize_workflow(bestTune) %>%
fit(data = train_data)
nb_predictions <- final_nb_wf %>%
predict(new_data = test_data, type = "class")
submission <- nb_predictions %>%
bind_cols(., test_data) %>%
select(id, .pred_class) %>%
rename(type = .pred_class)
vroom_write(x=submission, file="./NaiveBayes.csv", delim=",")
ghostRecipe <- recipe(type ~ ., data = train_data) %>%
step_mutate_at(c('color'), fn=factor) %>%
step_other(all_nominal_predictors(), threshold = .001) %>%
step_lencode_glm(all_nominal_predictors(), outcome = vars(type)) %>%
step_smote(neighbors = 20)
library(themis)
ghostRecipe <- recipe(type ~ ., data = train_data) %>%
step_mutate_at(c('color'), fn=factor) %>%
step_other(all_nominal_predictors(), threshold = .001) %>%
step_lencode_glm(all_nominal_predictors(), outcome = vars(type)) %>%
step_smote(neighbors = 20)
nb_model <- naive_Bayes(Laplace=0.1, smoothness=1.5) %>%
set_mode("classification") %>%
set_engine("naivebayes")
nb_wf <- workflow() %>%
add_recipe(ghostRecipe) %>%
add_model(nb_model)
tuning_grid <- grid_regular(Laplace(), smoothness(), levels = 5)
folds <- vfold_cv(train_data, v = 5, repeats=1)
CV_results <- nb_wf %>%
tune_grid(resamples=folds,
grid=tuning_grid,
metrics = metric_set(roc_auc))
bestTune <- CV_results %>%
select_best(metric="roc_auc")
final_nb_wf <- nb_wf %>%
#finalize_workflow(bestTune) %>%
fit(data = train_data)
nb_predictions <- final_nb_wf %>%
predict(new_data = test_data, type = "class")
submission <- nb_predictions %>%
bind_cols(., test_data) %>%
select(id, .pred_class) %>%
rename(type = .pred_class)
vroom_write(x=submission, file="./NaiveBayes.csv", delim=",")
library(tidyverse)
library(tidymodels)
library(vroom)
library(discrim)
library(encode)
library(themis)
test_data <- read_csv("test.csv")
train_data <- read_csv("train.csv")
ghostRecipe <- recipe(type ~ ., data = train_data) %>%
step_mutate_at(c('color'), fn=factor) %>%
step_other(all_nominal_predictors(), threshold = .001) %>%
step_lencode_glm(all_nominal_predictors(), outcome = vars(type)) %>%
step_smote(neighbors = 20)
nb_model <- naive_Bayes(Laplace=tune(), smoothness=tune()) %>%
set_mode("classification") %>%
set_engine("naivebayes")
nb_wf <- workflow() %>%
add_recipe(ghostRecipe) %>%
add_model(nb_model)
tuning_grid <- grid_regular(Laplace(), smoothness(), levels = 5)
folds <- vfold_cv(train_data, v = 5, repeats=1)
CV_results <- nb_wf %>%
tune_grid(resamples=folds,
grid=tuning_grid,
metrics = metric_set(roc_auc))
bestTune <- CV_results %>%
select_best(metric="roc_auc")
final_nb_wf <- nb_wf %>%
finalize_workflow(bestTune) %>%
fit(data = train_data)
nb_predictions <- final_nb_wf %>%
predict(new_data = test_data, type = "class")
submission <- nb_predictions %>%
bind_cols(., test_data) %>%
select(id, .pred_class) %>%
rename(type = .pred_class)
vroom_write(x=submission, file="./NaiveBayes.csv", delim=",")
ghostRecipe <- recipe(type ~ ., data = train_data) %>%
step_mutate_at(c('color'), fn=factor) %>%
step_other(all_nominal_predictors(), threshold = .001) %>%
step_lencode_glm(all_nominal_predictors(), outcome = vars(type)) %>%
step_smote(type, neighbors = 20)
nb_model <- naive_Bayes(Laplace=tune(), smoothness=tune()) %>%
set_mode("classification") %>%
set_engine("naivebayes")
nb_wf <- workflow() %>%
add_recipe(ghostRecipe) %>%
add_model(nb_model)
tuning_grid <- grid_regular(Laplace(), smoothness(), levels = 5)
folds <- vfold_cv(train_data, v = 5, repeats=1)
CV_results <- nb_wf %>%
tune_grid(resamples=folds,
grid=tuning_grid,
metrics = metric_set(roc_auc))
bestTune <- CV_results %>%
select_best(metric="roc_auc")
final_nb_wf <- nb_wf %>%
finalize_workflow(bestTune) %>%
fit(data = train_data)
nb_predictions <- final_nb_wf %>%
predict(new_data = test_data, type = "class")
submission <- nb_predictions %>%
bind_cols(., test_data) %>%
select(id, .pred_class) %>%
rename(type = .pred_class)
vroom_write(x=submission, file="./NaiveBayes.csv", delim=",")
test_data <- read_csv("test.csv")
train_data <- read_csv("train.csv")
ghostRecipe <- recipe(type ~ ., data = train_data) %>%
step_mutate_at(c('color'), fn=factor) %>%
step_other(all_nominal_predictors(), threshold = .001) %>%
step_lencode_glm(all_nominal_predictors(), outcome = vars(type)) %>%
step_smote(type, neighbors = 20)
nb_model <- naive_Bayes(Laplace=tune(), smoothness=tune()) %>%
set_mode("classification") %>%
set_engine("naivebayes")
nb_wf <- workflow() %>%
add_recipe(ghostRecipe) %>%
add_model(nb_model)
tuning_grid <- grid_regular(Laplace(), smoothness(), levels = 5)
folds <- vfold_cv(train_data, v = 5, repeats=1)
CV_results <- nb_wf %>%
tune_grid(resamples=folds,
grid=tuning_grid,
metrics = metric_set(roc_auc))
bestTune <- CV_results %>%
select_best(metric="roc_auc")
final_nb_wf <- nb_wf %>%
finalize_workflow(bestTune) %>%
fit(data = train_data)
nb_predictions <- final_nb_wf %>%
predict(new_data = test_data, type = "class")
submission <- nb_predictions %>%
bind_cols(., test_data) %>%
select(id, .pred_class) %>%
rename(type = .pred_class)
vroom_write(x=submission, file="./NaiveBayes.csv", delim=",")
